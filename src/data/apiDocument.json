{
	"openapi": "3.0.0",
	"info": {
		"title": "WHORU API",
		"version": "1.0.0",
		"description": "Anonymous Q&A Web Application API with AI-powered features",
		"contact": {
			"name": "WHORU Support",
			"email": "support@whoru.app"
		}
	},
	"servers": [
		{
			"url": "https://api.whoru.app",
			"description": "Production server"
		},
		{
			"url": "http://localhost:3000",
			"description": "Development server"
		}
	],
	"tags": [
		{
			"name": "Groups",
			"description": "Group management operations"
		},
		{
			"name": "Questions",
			"description": "Question operations"
		},
		{
			"name": "Answers",
			"description": "Answer operations"
		},
		{
			"name": "Media",
			"description": "Media file operations"
		},
		{
			"name": "AI",
			"description": "AI-powered features"
		},
		{
			"name": "Socket",
			"description": "Real-time communication"
		}
	],
	"paths": {
		"/api/groups": {
			"get": {
				"tags": ["Groups"],
				"summary": "Get public groups",
				"description": "Retrieve a paginated list of public groups",
				"operationId": "getPublicGroups",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 1,
							"default": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Items per page",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 1,
							"maximum": 100,
							"default": 20
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GroupListResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Groups"],
				"summary": "Create new group",
				"description": "Create a new question group",
				"operationId": "createGroup",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateGroupRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Group created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"400": {
						"description": "Invalid request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/groups/{groupId}": {
			"get": {
				"tags": ["Groups"],
				"summary": "Get specific group",
				"description": "Retrieve details of a specific group",
				"operationId": "getGroup",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "Group ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "x-access-key",
						"in": "header",
						"description": "Access key for private groups",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"403": {
						"description": "Access denied",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Groups"],
				"summary": "Update group",
				"description": "Update group settings (requires admin password)",
				"operationId": "updateGroup",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "Group ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateGroupRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Group updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Groups"],
				"summary": "Delete group",
				"description": "Delete a group (requires admin password)",
				"operationId": "deleteGroup",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "Group ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["adminPassword"],
								"properties": {
									"adminPassword": {
										"type": "string",
										"minLength": 6,
										"description": "Admin password"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Group deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Group not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/groups/{groupId}/settings": {
			"post": {
				"tags": ["Groups"],
				"summary": "Verify admin password",
				"description": "Verify admin password for group management",
				"operationId": "verifyAdminPassword",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "Group ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["adminPassword"],
								"properties": {
									"adminPassword": {
										"type": "string",
										"minLength": 6,
										"description": "Admin password"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Password verified successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponse"
								}
							}
						}
					},
					"401": {
						"description": "Invalid password",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/groups/join": {
			"post": {
				"tags": ["Groups"],
				"summary": "Join private group",
				"description": "Join a private group using access key",
				"operationId": "joinGroup",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["accessKey"],
								"properties": {
									"accessKey": {
										"type": "string",
										"description": "Group access key"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successfully joined group",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"404": {
						"description": "Invalid access key",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/groups/verify-password/{groupId}": {
			"post": {
				"tags": ["Groups"],
				"summary": "Verify access key",
				"description": "Verify access key for private group",
				"operationId": "verifyAccessKey",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "Group ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["accessKey"],
								"properties": {
									"accessKey": {
										"type": "string",
										"description": "Group access key"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Access key validation result",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"valid": {
											"type": "boolean",
											"description": "Whether the access key is valid"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/questions": {
			"post": {
				"tags": ["Questions"],
				"summary": "Create new question",
				"description": "Create a new question in a group",
				"operationId": "createQuestion",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateQuestionRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Question created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Question"
								}
							}
						}
					},
					"400": {
						"description": "Invalid request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/questions/{questionId}": {
			"get": {
				"tags": ["Questions"],
				"summary": "Get specific question",
				"description": "Retrieve details of a specific question",
				"operationId": "getQuestion",
				"parameters": [
					{
						"name": "questionId",
						"in": "path",
						"description": "Question ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Question"
								}
							}
						}
					},
					"404": {
						"description": "Question not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Questions"],
				"summary": "Update question",
				"description": "Update question content (requires author password)",
				"operationId": "updateQuestion",
				"parameters": [
					{
						"name": "questionId",
						"in": "path",
						"description": "Question ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateQuestionRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Question updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Question"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Question not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Questions"],
				"summary": "Delete question",
				"description": "Delete a question (requires author password)",
				"operationId": "deleteQuestion",
				"parameters": [
					{
						"name": "questionId",
						"in": "path",
						"description": "Question ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["authorPassword"],
								"properties": {
									"authorPassword": {
										"type": "string",
										"minLength": 6,
										"description": "Author password"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Question deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Question not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/questions/group/{groupId}": {
			"get": {
				"tags": ["Questions"],
				"summary": "Get questions by group",
				"description": "Retrieve questions from a specific group",
				"operationId": "getQuestionsByGroup",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "Group ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 1,
							"default": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Items per page",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 1,
							"maximum": 100,
							"default": 20
						}
					},
					{
						"name": "sortBy",
						"in": "query",
						"description": "Sort order",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["recent", "popular", "unanswered"],
							"default": "recent"
						}
					},
					{
						"name": "tags",
						"in": "query",
						"description": "Filter by tags (comma-separated)",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/QuestionListResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/questions/{questionId}/accept-answer": {
			"post": {
				"tags": ["Questions"],
				"summary": "Accept an answer",
				"description": "Mark an answer as accepted (requires question author password)",
				"operationId": "acceptAnswer",
				"parameters": [
					{
						"name": "questionId",
						"in": "path",
						"description": "Question ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["answerId", "questionAuthorPassword"],
								"properties": {
									"answerId": {
										"type": "string",
										"description": "Answer ID to accept"
									},
									"questionAuthorPassword": {
										"type": "string",
										"minLength": 6,
										"description": "Question author password"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Answer accepted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponse"
								}
							}
						}
					},
					"400": {
						"description": "Failed to accept answer",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/answers": {
			"post": {
				"tags": ["Answers"],
				"summary": "Create new answer",
				"description": "Create a new answer for a question",
				"operationId": "createAnswer",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateAnswerRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Answer created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Answer"
								}
							}
						}
					},
					"400": {
						"description": "Invalid request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/answers/{answerId}": {
			"get": {
				"tags": ["Answers"],
				"summary": "Get specific answer",
				"description": "Retrieve details of a specific answer",
				"operationId": "getAnswer",
				"parameters": [
					{
						"name": "answerId",
						"in": "path",
						"description": "Answer ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Answer"
								}
							}
						}
					},
					"404": {
						"description": "Answer not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Answers"],
				"summary": "Update answer",
				"description": "Update answer content (requires author password)",
				"operationId": "updateAnswer",
				"parameters": [
					{
						"name": "answerId",
						"in": "path",
						"description": "Answer ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateAnswerRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Answer updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"content": {
											"type": "string"
										},
										"updatedAt": {
											"type": "string",
											"format": "date-time"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Answer not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Answers"],
				"summary": "Delete answer",
				"description": "Delete an answer (requires author password)",
				"operationId": "deleteAnswer",
				"parameters": [
					{
						"name": "answerId",
						"in": "path",
						"description": "Answer ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["authorPassword"],
								"properties": {
									"authorPassword": {
										"type": "string",
										"minLength": 6,
										"description": "Author password"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Answer deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Answer not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/answers/{answerId}/vote": {
			"post": {
				"tags": ["Answers"],
				"summary": "Vote on answer",
				"description": "Upvote or downvote an answer",
				"operationId": "voteAnswer",
				"parameters": [
					{
						"name": "answerId",
						"in": "path",
						"description": "Answer ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["voteType"],
								"properties": {
									"voteType": {
										"type": "string",
										"enum": ["upvote", "downvote"],
										"description": "Vote type"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Vote recorded successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/answers/question/{questionId}": {
			"get": {
				"tags": ["Answers"],
				"summary": "Get answers by question",
				"description": "Retrieve answers for a specific question",
				"operationId": "getAnswersByQuestion",
				"parameters": [
					{
						"name": "questionId",
						"in": "path",
						"description": "Question ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 1,
							"default": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Items per page",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 1,
							"maximum": 100,
							"default": 50
						}
					},
					{
						"name": "sortBy",
						"in": "query",
						"description": "Sort order",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["newest", "oldest", "votes"],
							"default": "newest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnswerListResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/media": {
			"post": {
				"tags": ["Media"],
				"summary": "Create presigned upload URL",
				"description": "Get a presigned URL for uploading media files",
				"operationId": "createMediaUploadUrl",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateMediaRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Upload URL created successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"mediaId": {
											"type": "string",
											"description": "Media ID"
										},
										"uploadUrl": {
											"type": "string",
											"format": "url",
											"description": "Presigned upload URL"
										},
										"expiresIn": {
											"type": "integer",
											"description": "URL expiration time in seconds"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid file type",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/media/{mediaId}": {
			"get": {
				"tags": ["Media"],
				"summary": "Get media download URL",
				"description": "Get a presigned URL for downloading media files",
				"operationId": "getMediaDownloadUrl",
				"parameters": [
					{
						"name": "mediaId",
						"in": "path",
						"description": "Media ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Download URL retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MediaResponse"
								}
							}
						}
					},
					"404": {
						"description": "Media not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Media"],
				"summary": "Delete media",
				"description": "Delete a media file",
				"operationId": "deleteMedia",
				"parameters": [
					{
						"name": "mediaId",
						"in": "path",
						"description": "Media ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Media deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponse"
								}
							}
						}
					},
					"404": {
						"description": "Media not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/media/link": {
			"post": {
				"tags": ["Media"],
				"summary": "Link media to content",
				"description": "Associate media files with a question or answer",
				"operationId": "linkMedia",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["mediaIds", "contentType", "contentId"],
								"properties": {
									"mediaIds": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"description": "Array of media IDs"
									},
									"contentType": {
										"type": "string",
										"enum": ["question", "answer"],
										"description": "Type of content"
									},
									"contentId": {
										"type": "string",
										"description": "ID of the content"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Media linked successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/ai/generate-question": {
			"post": {
				"tags": ["AI"],
				"summary": "Generate questions with AI",
				"description": "Generate questions using AI based on topic (streaming response)",
				"operationId": "generateQuestions",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GenerateQuestionRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Questions generated successfully (streaming)",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string",
									"description": "Streaming response containing generated questions"
								}
							}
						}
					},
					"429": {
						"description": "Daily usage limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/ai/generate-answer": {
			"post": {
				"tags": ["AI"],
				"summary": "Generate answer with AI",
				"description": "Generate an answer for a question using AI (streaming response)",
				"operationId": "generateAnswer",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GenerateAnswerRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Answer generated successfully (streaming)",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string",
									"description": "Streaming response containing generated answer"
								}
							}
						}
					},
					"404": {
						"description": "Question not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"429": {
						"description": "Usage limit exceeded for this question",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/ai/similar-questions": {
			"post": {
				"tags": ["AI"],
				"summary": "Find similar questions",
				"description": "Find questions similar to the provided text",
				"operationId": "findSimilarQuestions",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SimilarQuestionsRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Similar questions found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SimilarQuestionsResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/socket": {
			"get": {
				"tags": ["Socket"],
				"summary": "Socket.IO status",
				"description": "Get Socket.IO server status and connection information",
				"operationId": "getSocketStatus",
				"responses": {
					"200": {
						"description": "Socket.IO server status",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"description": "Server status message"
										},
										"url": {
											"type": "string",
											"format": "url",
											"description": "Socket.IO server URL"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Group": {
				"type": "object",
				"required": [
					"id",
					"name",
					"isPublic",
					"tags",
					"questionCount",
					"lastActivityAt",
					"createdAt"
				],
				"properties": {
					"id": {
						"type": "string",
						"description": "Group ID"
					},
					"name": {
						"type": "string",
						"minLength": 1,
						"maxLength": 100,
						"description": "Group name"
					},
					"description": {
						"type": "string",
						"maxLength": 500,
						"nullable": true,
						"description": "Group description"
					},
					"isPublic": {
						"type": "boolean",
						"description": "Whether the group is public"
					},
					"accessKey": {
						"type": "string",
						"description": "Access key for private groups"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"maxItems": 10,
						"description": "Group tags"
					},
					"questionCount": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of questions in the group"
					},
					"lastActivityAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last activity timestamp"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "Creation timestamp"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last update timestamp"
					}
				}
			},
			"Question": {
				"type": "object",
				"required": [
					"id",
					"groupId",
					"content",
					"authorNickname",
					"tags",
					"answerCount",
					"isAnswered",
					"upvotes",
					"views",
					"createdAt"
				],
				"properties": {
					"id": {
						"type": "string",
						"description": "Question ID"
					},
					"groupId": {
						"type": "string",
						"description": "Group ID"
					},
					"title": {
						"type": "string",
						"maxLength": 200,
						"nullable": true,
						"description": "Question title"
					},
					"content": {
						"type": "string",
						"minLength": 1,
						"maxLength": 5000,
						"description": "Question content"
					},
					"authorNickname": {
						"type": "string",
						"minLength": 1,
						"maxLength": 50,
						"description": "Author nickname"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"maxItems": 5,
						"description": "Question tags"
					},
					"answerCount": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of answers"
					},
					"isAnswered": {
						"type": "boolean",
						"description": "Whether the question has an accepted answer"
					},
					"isResolvedByAsker": {
						"type": "boolean",
						"description": "Whether the asker marked it as resolved"
					},
					"upvotes": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of upvotes"
					},
					"views": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of views"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "Creation timestamp"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last update timestamp"
					}
				}
			},
			"Answer": {
				"type": "object",
				"required": [
					"id",
					"questionId",
					"groupId",
					"content",
					"authorNickname",
					"upvotes",
					"isAccepted",
					"createdAt"
				],
				"properties": {
					"id": {
						"type": "string",
						"description": "Answer ID"
					},
					"questionId": {
						"type": "string",
						"description": "Question ID"
					},
					"groupId": {
						"type": "string",
						"description": "Group ID"
					},
					"content": {
						"type": "string",
						"minLength": 1,
						"maxLength": 5000,
						"description": "Answer content"
					},
					"authorNickname": {
						"type": "string",
						"minLength": 1,
						"maxLength": 50,
						"description": "Author nickname"
					},
					"upvotes": {
						"type": "integer",
						"minimum": 0,
						"description": "Number of upvotes"
					},
					"isAccepted": {
						"type": "boolean",
						"description": "Whether this answer is accepted"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "Creation timestamp"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last update timestamp"
					}
				}
			},
			"CreateGroupRequest": {
				"type": "object",
				"required": ["name", "isPublic", "adminPassword"],
				"properties": {
					"name": {
						"type": "string",
						"minLength": 1,
						"maxLength": 100,
						"description": "Group name"
					},
					"description": {
						"type": "string",
						"maxLength": 500,
						"description": "Group description"
					},
					"isPublic": {
						"type": "boolean",
						"description": "Whether the group is public"
					},
					"adminPassword": {
						"type": "string",
						"minLength": 6,
						"description": "Admin password for group management"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"maxItems": 10,
						"default": [],
						"description": "Group tags"
					}
				}
			},
			"UpdateGroupRequest": {
				"type": "object",
				"required": ["adminPassword"],
				"properties": {
					"name": {
						"type": "string",
						"minLength": 1,
						"maxLength": 100,
						"description": "Group name"
					},
					"description": {
						"type": "string",
						"maxLength": 500,
						"nullable": true,
						"description": "Group description"
					},
					"isPublic": {
						"type": "boolean",
						"description": "Whether the group is public"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"maxItems": 10,
						"description": "Group tags"
					},
					"adminPassword": {
						"type": "string",
						"minLength": 6,
						"description": "Admin password for verification"
					}
				}
			},
			"CreateQuestionRequest": {
				"type": "object",
				"required": ["groupId", "content", "authorNickname", "authorPassword"],
				"properties": {
					"groupId": {
						"type": "string",
						"description": "Group ID"
					},
					"title": {
						"type": "string",
						"maxLength": 200,
						"description": "Question title"
					},
					"content": {
						"type": "string",
						"minLength": 1,
						"maxLength": 5000,
						"description": "Question content"
					},
					"authorNickname": {
						"type": "string",
						"minLength": 1,
						"maxLength": 50,
						"description": "Author nickname"
					},
					"authorPassword": {
						"type": "string",
						"minLength": 6,
						"description": "Author password for editing"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"maxItems": 5,
						"default": [],
						"description": "Question tags"
					},
					"mediaIds": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Associated media IDs"
					}
				}
			},
			"UpdateQuestionRequest": {
				"type": "object",
				"required": ["authorPassword"],
				"properties": {
					"title": {
						"type": "string",
						"maxLength": 200,
						"nullable": true,
						"description": "Question title"
					},
					"content": {
						"type": "string",
						"minLength": 1,
						"maxLength": 5000,
						"description": "Question content"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"maxItems": 5,
						"description": "Question tags"
					},
					"authorPassword": {
						"type": "string",
						"minLength": 6,
						"description": "Author password for verification"
					}
				}
			},
			"CreateAnswerRequest": {
				"type": "object",
				"required": [
					"questionId",
					"content",
					"authorNickname",
					"authorPassword"
				],
				"properties": {
					"questionId": {
						"type": "string",
						"description": "Question ID"
					},
					"content": {
						"type": "string",
						"minLength": 1,
						"maxLength": 5000,
						"description": "Answer content"
					},
					"authorNickname": {
						"type": "string",
						"minLength": 1,
						"maxLength": 50,
						"description": "Author nickname"
					},
					"authorPassword": {
						"type": "string",
						"minLength": 6,
						"description": "Author password for editing"
					},
					"mediaIds": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Associated media IDs"
					}
				}
			},
			"UpdateAnswerRequest": {
				"type": "object",
				"required": ["content", "authorPassword"],
				"properties": {
					"content": {
						"type": "string",
						"minLength": 1,
						"maxLength": 5000,
						"description": "Answer content"
					},
					"authorPassword": {
						"type": "string",
						"minLength": 6,
						"description": "Author password for verification"
					}
				}
			},
			"CreateMediaRequest": {
				"type": "object",
				"required": ["originalName", "mimeType", "size", "uploadedBy"],
				"properties": {
					"originalName": {
						"type": "string",
						"description": "Original file name"
					},
					"mimeType": {
						"type": "string",
						"enum": ["image/jpeg", "image/png", "image/gif", "image/webp"],
						"description": "File MIME type"
					},
					"size": {
						"type": "integer",
						"minimum": 1,
						"maximum": 10485760,
						"description": "File size in bytes (max 10MB)"
					},
					"uploadedBy": {
						"type": "string",
						"description": "Uploader nickname"
					}
				}
			},
			"MediaResponse": {
				"type": "object",
				"properties": {
					"mediaId": {
						"type": "string",
						"description": "Media ID"
					},
					"filename": {
						"type": "string",
						"description": "File name"
					},
					"originalName": {
						"type": "string",
						"description": "Original file name"
					},
					"mimeType": {
						"type": "string",
						"description": "File MIME type"
					},
					"size": {
						"type": "integer",
						"description": "File size in bytes"
					},
					"downloadUrl": {
						"type": "string",
						"format": "url",
						"description": "Presigned download URL"
					},
					"expiresIn": {
						"type": "integer",
						"description": "URL expiration time in seconds"
					}
				}
			},
			"GenerateQuestionRequest": {
				"type": "object",
				"required": ["groupId", "topic"],
				"properties": {
					"groupId": {
						"type": "string",
						"description": "Group ID"
					},
					"topic": {
						"type": "string",
						"maxLength": 200,
						"description": "Topic for question generation"
					},
					"context": {
						"type": "string",
						"maxLength": 1000,
						"description": "Additional context"
					},
					"count": {
						"type": "integer",
						"minimum": 1,
						"maximum": 5,
						"default": 3,
						"description": "Number of questions to generate"
					}
				}
			},
			"GenerateAnswerRequest": {
				"type": "object",
				"required": ["questionId"],
				"properties": {
					"questionId": {
						"type": "string",
						"description": "Question ID"
					},
					"additionalContext": {
						"type": "string",
						"maxLength": 1000,
						"description": "Additional context for answer generation"
					}
				}
			},
			"SimilarQuestionsRequest": {
				"type": "object",
				"required": ["groupId", "questionText"],
				"properties": {
					"groupId": {
						"type": "string",
						"description": "Group ID"
					},
					"questionText": {
						"type": "string",
						"maxLength": 500,
						"description": "Question text to find similar questions"
					},
					"limit": {
						"type": "integer",
						"minimum": 1,
						"maximum": 10,
						"default": 5,
						"description": "Maximum number of similar questions"
					}
				}
			},
			"SimilarQuestionsResponse": {
				"type": "object",
				"properties": {
					"similarQuestions": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"title": {
									"type": "string",
									"nullable": true
								},
								"content": {
									"type": "string"
								},
								"tags": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"answerCount": {
									"type": "integer"
								},
								"upvotes": {
									"type": "integer"
								},
								"createdAt": {
									"type": "string",
									"format": "date-time"
								}
							}
						}
					},
					"usage": {
						"type": "object",
						"properties": {
							"tokensUsed": {
								"type": "integer"
							},
							"cost": {
								"type": "number"
							}
						}
					}
				}
			},
			"GroupListResponse": {
				"type": "object",
				"properties": {
					"groups": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Group"
						}
					},
					"pagination": {
						"$ref": "#/components/schemas/PaginationInfo"
					}
				}
			},
			"QuestionListResponse": {
				"type": "object",
				"properties": {
					"questions": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Question"
						}
					},
					"pagination": {
						"$ref": "#/components/schemas/PaginationInfo"
					}
				}
			},
			"AnswerListResponse": {
				"type": "object",
				"properties": {
					"answers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Answer"
						}
					},
					"pagination": {
						"$ref": "#/components/schemas/PaginationInfo"
					}
				}
			},
			"PaginationInfo": {
				"type": "object",
				"properties": {
					"page": {
						"type": "integer",
						"description": "Current page"
					},
					"limit": {
						"type": "integer",
						"description": "Items per page"
					},
					"total": {
						"type": "integer",
						"description": "Total items"
					},
					"totalPages": {
						"type": "integer",
						"description": "Total pages"
					}
				}
			},
			"SuccessResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"default": true
					}
				}
			},
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"error": {
						"type": "string",
						"description": "Error message"
					},
					"details": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"path": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"message": {
									"type": "string"
								}
							}
						},
						"description": "Validation error details"
					}
				}
			}
		}
	}
}
