// src/repositories/groupRepository.ts
import { Collection, Document, ObjectId } from "mongodb";
import { connectToDatabase } from "@/utils/mongodb"; // Assuming mongodb.ts is in utils
import { GroupSchema, GroupSettingsSchema } from "@/utils/schema"; // For type inference
import { z } from "zod";

// Internal type for what's stored in DB. Dates are Date objects.
// MongoDB will have an _id of type ObjectId. We use a separate string 'id' field for nanoid.
export interface GroupDocument extends Document {
	_id: ObjectId; // MongoDB native ID
	id: string; // Our nanoid application ID
	name: string;
	description: string | null;
	isPublic: boolean;
	accessCode: string | null;
	qrCodeLink: string | null;
	createdAt: Date;
	updatedAt: Date;
	expiresAt: Date | null;
	settings: z.infer<typeof GroupSettingsSchema>;
	// tags will be managed via questions or a separate group-level tag concept
	memberCount: number;
	questionCount: number;
	lastActivityAt: Date;
	// We should store creatorTempId for ownership/admin purposes
	creatorTempId: string;
}

// Type for data being inserted (matches GroupDocument structure, _id is generated by Mongo)
export type GroupInsertData = Omit<
	GroupDocument,
	"_id" | "memberCount" | "questionCount"
> & {
	memberCount?: number;
	questionCount?: number;
};

// Helper to map MongoDB document to our API schema type (z.infer<typeof GroupSchema>)
// This converts Date objects to ISO strings as defined in GroupSchema
const mapDocumentToGroupSchema = (
	doc: GroupDocument
): z.infer<typeof GroupSchema> => {
	return {
		id: doc.id,
		name: doc.name,
		description: doc.description,
		isPublic: doc.isPublic,
		accessCode: doc.accessCode, // Only return if contextually appropriate (e.g., to creator)
		qrCodeLink: doc.qrCodeLink,
		createdAt: doc.createdAt.toISOString(),
		updatedAt: doc.updatedAt.toISOString(),
		expiresAt: doc.expiresAt ? doc.expiresAt.toISOString() : null,
		settings: doc.settings,
		memberCount: doc.memberCount,
		questionCount: doc.questionCount,
		lastActivityAt: doc.lastActivityAt.toISOString(),
		// We might not always want to expose creatorTempId in the API response
		// For now, GroupSchema does not include it, so we omit it here.
	};
};

export class GroupRepository {
	private async getCollection(): Promise<Collection<GroupDocument>> {
		const { db } = await connectToDatabase();
		return db.collection<GroupDocument>("groups");
	}

	async create(
		groupData: GroupInsertData
	): Promise<z.infer<typeof GroupSchema>> {
		const collection = await this.getCollection();
		const result = await collection.insertOne(groupData as GroupDocument); // Type assertion

		// Fetch the inserted document to get all fields including defaults and _id
		const newGroupDoc = await collection.findOne({ _id: result.insertedId });
		if (!newGroupDoc) {
			throw new Error("Failed to create or retrieve group after insertion.");
		}
		return mapDocumentToGroupSchema(newGroupDoc);
	}

	async findById(id: string): Promise<z.infer<typeof GroupSchema> | null> {
		const collection = await this.getCollection();
		const groupDoc = await collection.findOne({ id: id }); // Query by our nanoid 'id'
		return groupDoc ? mapDocumentToGroupSchema(groupDoc) : null;
	}

	async findAllPublic(
		page: number,
		limit: number,
		sortBy: string,
		sortOrder: "asc" | "desc"
	): Promise<z.infer<typeof GroupSchema>[]> {
		const collection = await this.getCollection();
		const skip = (page - 1) * limit;
		const sortParams: { [key: string]: 1 | -1 } = {};
		sortParams[sortBy] = sortOrder === "asc" ? 1 : -1;

		const groupDocs = await collection
			.find({ isPublic: true })
			.sort(sortParams)
			.skip(skip)
			.limit(limit)
			.toArray();

		return groupDocs.map(mapDocumentToGroupSchema);
	}

	async countAllPublic(): Promise<number> {
		const collection = await this.getCollection();
		return collection.countDocuments({ isPublic: true });
	}

	// Add other methods like update, delete, findByAccessCode etc. as needed
}

export const groupRepository = new GroupRepository();
